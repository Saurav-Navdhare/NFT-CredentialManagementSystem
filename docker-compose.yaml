services:
  frontend:
    image: node:18
    container_name: react-dev
    working_dir: /app
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    command: sh -c "npm install && npm start"
    env_file:
      - ./client/.env
    environment:
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    tty: true

  backend:
    build:
      context: ./api
    container_name: go-backend
    ports:
      - "4000:4000"
    depends_on:
      - postgres
      - redis
    env_file:
      - ./api/.env

  ipfs:
    image: ipfs/kubo:latest
    container_name: private-ipfs
    restart: unless-stopped
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    environment:
      - IPFS_PROFILE=server
    entrypoint: >
      sh -c "
      ipfs init &&
      ipfs config --json API.HTTPHeaders '{\"Access-Control-Allow-Origin\": [\"*\"], \"Access-Control-Allow-Methods\": [\"PUT\", \"POST\", \"GET\"]}' &&
      ipfs config --json Addresses.API '\"/ip4/0.0.0.0/tcp/5001\"' &&
      ipfs config --json Addresses.Gateway '\"/ip4/0.0.0.0/tcp/8080\"' &&
      ipfs daemon --offline
      "

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    env_file:
      - ./api/.env
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    env_file:
      - ./api/.env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./client/build:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
      - ipfs

volumes:
  ipfs_data:
  db_data:
  redis_data:
